/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from "workbox-core";
import { ExpirationPlugin } from "workbox-expiration";
import { precacheAndRoute, createHandlerBoundToURL } from "workbox-precaching";
import { registerRoute } from "workbox-routing";
import { StaleWhileRevalidate } from "workbox-strategies";

import {
   getPostsFromClientStorage,
   deletePostFromClientStorage,
} from "./utils/clientStorage";

import { NODE_BASE_URL, PROJECTS_PATH } from "./utils/constants";

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

const CACHE_NAME = "v3";
const STATIC_CACHED_ASSETS = [];

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp("/[^/?]+\\.[^/]+$");
registerRoute(
   // Return false to exempt requests from being fulfilled by index.html.
   ({ request, url }) => {
      // If this isn't a navigation, skip.
      if (request.mode !== "navigate") {
         return false;
      } // If this is a URL that starts with /_, skip.

      if (url.pathname.startsWith("/_")) {
         return false;
      } // If this looks like a URL for a resource, because it contains // a file extension, skip.

      if (url.pathname.match(fileExtensionRegexp)) {
         return false;
      } // Return true to signal that we want to use the handler.

      return true;
   },
   createHandlerBoundToURL(process.env.PUBLIC_URL + "/index.html")
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
   // Add in any other file extensions or routing criteria as needed.
   ({ url }) =>
      url.origin === self.location.origin && url.pathname.endsWith(".png"), // Customize this strategy as needed, e.g., by changing to CacheFirst.
   new StaleWhileRevalidate({
      cacheName: "images",
      plugins: [
         // Ensure that once this runtime cache reaches a maximum size the
         // least-recently used images are removed.
         new ExpirationPlugin({ maxEntries: 50 }),
      ],
   })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener("message", (event) => {
   if (event.data && event.data.type === "SKIP_WAITING") {
      self.skipWaiting();
   }
});

// Any other custom service worker logic can go here.
// Install Service Worker...
self.addEventListener("install", (event) => {
   console.log(`From Service Worker:  Install event`);
   self.skipWaiting();

   const preCache = async () => {
      const cache = await caches.open(CACHE_NAME);
      return cache.addAll(STATIC_CACHED_ASSETS);
   };

   event.waitUntil(preCache());
});

// Activate the Service Worker...
self.addEventListener("activate", (event) => {
   console.log(`From Service Worker:  Activate event`);
});

// Listen for requests...
self.addEventListener("fetch", (event) => {
   console.log("From Service Worker:  Fetch event");

   const requestUrl = new URL(event.request.url);
   const requestPath = requestUrl.pathname;
   const fileName = requestPath.substring(requestPath.lastIndexOf("/") + 1);

   console.log("Request URL: ", requestUrl);
   console.log("Request Path: ", requestPath);
   console.log("File Name: ", fileName);

   if (
      requestPath === "/api/v1/projects" ||
      requestPath === "/api/v1/users" ||
      requestPath === "/api/v1/subscription"
   ) {
      return event.respondWith(fetch(event.request));
   } else if (
      fileName === "serviceworker.js" ||
      fileName === "serviceworkerDEV.js"
   ) {
      return event.respondWith(networkFirstStrategy(event.request));
   }

   return event.respondWith(cacheFirstStrategy(event.request));
});

self.addEventListener("sync", async (event) => {
   console.log("From Service Worker:  Sync event");

   if (event.tag === "sync-new-post") {
      console.log("From Service Worker:  sync-new-post");

      let posts = await getPostsFromClientStorage();
      console.log(posts);

      posts.forEach((post) => {
         fetch(`${NODE_BASE_URL}${PROJECTS_PATH}`, {
            method: "POST",
            body: JSON.stringify(post),
            headers: {
               "Content-Type": "application/json; charset=UTF-8",
            },
         })
            .then((response) => response.json())
            .then(async (json) => {
               console.log(
                  "From Service Worker - Response from backend: ",
                  json
               );

               console.log(
                  await deletePostFromClientStorage(json._id.toString())
               );
            });
      });
   }
});

self.addEventListener("notificationclick", (event) => {
   console.log("From Service Worker:  Notification Click event");
});

self.addEventListener("notificationclose", (event) => {
   console.log("From Service Worker:  Notification Close event");
});

self.addEventListener("push", (event) => {
   console.log("From Service Worker:  Push event");

   let data = {
      title: "New...",
      body: "Something new happened !",
   };

   if (event.data) {
      data = JSON.parse(event.data.text());
   }

   let options = {
      body: data.body,
   };

   event.waitUntil(self.registration.showNotification(data.title, options));
});

const cacheFirstStrategy = async (request) => {
   const cacheResponse = await caches.match(request);
   return cacheResponse || fetchRequestAndCache(request);
};

const networkFirstStrategy = async (request) => {
   try {
      return await fetchRequestAndCache(request);
   } catch {
      return await caches.match(request);
   }
};

const fetchRequestAndCache = async (request) => {
   const networkResponse = await fetch(request);
   const clonedResponse = networkResponse.clone();
   const cache = await caches.open(CACHE_NAME);
   cache.put(request, networkResponse);
   return clonedResponse;
};
